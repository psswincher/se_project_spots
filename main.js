!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",inputErrorStyle:"modal__input_type_error",submitButtonSelector:".modal__submit-button",submitButtonName:"modal__submit-button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:".modal__input_type_error",errorClass:"modal__error_visible",debugging:!0},t="modal_open";class i{constructor(e){let{title:t,imageLink:i,imageClickManager:s}=e;this._cardTemplate=document.querySelector("#card"),this._cardElement=this._cardTemplate.content.querySelector(".card").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._titleElement=this._cardElement.querySelector(".card__title"),this._cardUnlikedImage=this._cardElement.querySelector(".card__unliked-image"),this._cardLikedImage=this._cardElement.querySelector(".card__liked-image"),this._onDeleteClick=this._onDeleteClick.bind(this),this._imageClickManager=s,this.setTitle(t),this.setCardImage(i),this.setCardImageAlt(t),this._setEventListeners()}_setEventListeners(){this._cardImage.addEventListener("click",(()=>this.onImageClick())),this._likeButton.addEventListener("click",(()=>this.onLikeClick())),this._deleteButton.addEventListener("click",(()=>this._onDeleteClick()))}setTitle(e){"string"==typeof e?(this.titleText=e,this._titleElement.textContent=this._titleText):(console.log("New card title is not a string. Setting to default."),this.titleText="unnamed card",this._titleElement.textContent=this.titleText)}setCardImage(e){this.imageLink=e,this._cardImage.setAttribute("src",this.imageLink)}setCardImageAlt(e){this.imageAltText=e||this.titleText,this._cardImage.setAttribute("alt",this.imageAltText)}onLikeClick(){this.isLikeActive()?this.deactivateLikeButton():this.activateLikeButton()}isLikeActive(){return!this._cardLikedImage.classList.contains("card__liked-image__inactive")}activateLikeButton(){this._cardLikedImage.classList.remove("card__liked-image__inactive"),this._cardUnlikedImage.classList.add("card__unliked-image__inactive")}deactivateLikeButton(){this._cardLikedImage.classList.add("card__liked-image__inactive"),this._cardUnlikedImage.classList.remove("card__unliked-image__inactive")}_remove(){console.log(this._cardElement),this._cardElement.remove()}_onDeleteClick(){this._remove()}onImageClick(){this._imageClickManager()}getView(){return this._cardElement}}class s{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t),this._modalSelector=t,this._handleEscapeClose=this._handleEscapeClose.bind(this),this._closeButton=this._modalElement.querySelector(".modal__close-button"),this._setEventListeners()}open(){this._modalElement.classList.add(t),this._setEscapeListener(!0)}close(){this._modalElement.classList.remove(t),this._setEscapeListener(!1)}_handleEscapeClose(e){"Escape"===e.key&&this.close()}_setEscapeListener(e){e?document.addEventListener("keydown",this._handleEscapeClose):document.removeEventListener("keydown",this._handleEscapeClose)}_setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._modalElement.addEventListener("click",(e=>this._handleModalOverlayClick(e)))}_handleModalOverlayClick(e){e.target.classList.contains("modal")&&this.close()}}class n extends s{constructor(e){let{modalSelector:t,onSubmitCallback:i}=e;super({modalSelector:t}),this._onSubmitCallback=i,this._submitButton=this._modalElement.querySelector(".modal__submit-button"),this._inputFields=this._modalElement.querySelectorAll(".modal__input"),this._form=this._modalElement.querySelector(".modal__form"),this._currentProfileName=document.querySelector(".profile__name"),this._currentProfileDescription=document.querySelector(".profile__description")}getFormElement(){return this._form}_reset(){this._inputFields.forEach((e=>{e.value=""}))}_setEventListeners(){super._setEventListeners(),this._modalElement.addEventListener("submit",(e=>this._onSubmit(e)))}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.name]=t.value})),e}_onSubmit(e){e.preventDefault(),this._onSubmitCallback(this._getInputValues()),this._reset(),this.close()}setDefaultInputs(e){this._inputFields.forEach((t=>{e[t.name]&&(t.value=e[t.name])}))}setPlaceholderInputs(e){this._inputFields.forEach((t=>{console.log(t.name),e[t.name]&&t.setAttribute("placeholder",e[t.name])}))}}class l{constructor(e,t){this._settings=e,this._formElement=t,this._setFormInputElements(),this._setFormButtons()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._disableButton(),this._clearFormInputElements()}_showInputError=e=>{const t=this._getErrorElement(e);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)};_hideInputError=e=>{const t=this._getErrorElement(e);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""};_checkFieldValidity=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_getErrorElement(e){return document.querySelector(`#${e.id}-input-error`)}_checkInvalidInput(){return this._formInputElements.every((e=>0!==e.value.length&&e.validity.valid))}_setFormInputElements(){this._formInputElements=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector))}_clearFormInputElements(){this._formInputElements.forEach((e=>{e.value=""}))}_setFormButtons(){this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}_toggleSubmitButton(){this._checkInvalidInput()?this._enableButton():this._disableButton()}_disableButton(){this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0}_enableButton(){this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1}_setEventListeners(){this._toggleSubmitButton(),this._formInputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkFieldValidity(e),this._toggleSubmitButton()}))}))}}const r=document.querySelector(".profile__name"),a=document.querySelector(".profile__description"),o=new n({modalSelector:"#edit-profile-modal",onSubmitCallback:e=>{r.textContent=e["profile-name"],a.textContent=e["profile-description"]}});o.setDefaultInputs({"profile-name":r.textContent,"profile-description":a.textContent}),new l(e,o.getFormElement()).enableValidation();const c=new n({modalSelector:"#post-modal",onSubmitCallback:e=>{const t=d({title:e["post-title"],imageLink:e["post-image-link"]});_.addItem(t)}});c.setPlaceholderInputs({"post-image-link":"Paste a link to the picture","post-caption":"Type your caption"}),new l(e,c.getFormElement()).enableValidation();const m=new class extends s{constructor(e){let{modalSelector:t}=e;super({modalSelector:t}),this._previewImage=document.querySelector(".modal__preview-image"),this._previewTitle=document.querySelector("#preview-title"),this._previewTitleText=""}populatePreview(e){let{imageUrl:t,imageAlt:i,titleText:s}=e;this._setPreviewTitle(s),this._setPreviewImage(t),this._setPreviewImageAlt(i)}_setPreviewImage(e){this.imageUrl=e,this._previewImage.setAttribute("src",e)}_setPreviewTitle(e){this._previewTitleText=e,this._previewTitle.textContent=this._previewTitleText}_setPreviewImageAlt(e){e?this._previewImage.setAttribute("alt",e):this._previewImage.setAttribute("alt",this._previewTitleText)}clear(){this.setPreviewImage({imageUrl:"",imageAlt:""}),this.setPreviewTitle("")}}({modalSelector:"#preview-modal"}),_=new class{constructor(e){let{items:t,renderer:i,containerSelector:s}=e;this._items=t,this._renderer=i,this._containerSelector=s,this._container=document.querySelector(this._containerSelector)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){console.log(e),this._items.push(e),this._container.append(e)}_clear(){this._items.internalHTML=""}getLastElement(){return console.log(this._container),console.log(this._items[this._items.length-1]),this._items[this._items.length-1]}}({items:[{title:"5-minute Dungeon",imageLink:"https://vigilantebar.com/wp-content/uploads/2022/08/5-Minute-Dungeon-scaled.jpg"},{title:"7 Wonders",imageLink:"https://vigilantebar.com/wp-content/uploads/2020/06/pic860217.jpg"},{title:"Abduction",imageLink:"https://vigilantebar.com/wp-content/uploads/2023/08/71Z8QTM8qXL._AC_UF8941000_QL80_.jpg"},{title:"Agricola",imageLink:"https://vigilantebar.com/wp-content/uploads/2022/08/Agricola.jpg"},{title:"Black Fleet",imageLink:"https://vigilantebar.com/wp-content/uploads/2022/08/Black-Fleet.jpg"},{title:"Call to Adventure",imageLink:"https://vigilantebar.com/wp-content/uploads/2022/08/Call-to-Adventure-scaled.jpg"}],renderer:e=>{const t=d(e);_.addItem(t)},containerSelector:".cards__list"});function d(e){let{title:t,imageLink:s}=e;const n=new i({title:t,imageLink:s,imageClickManager:()=>{m.populatePreview({imageUrl:n.imageLink,imageAlt:n.imageAltText,titleText:n.titleText}),m.open()}});return n.getView()}_.renderItems(),document.querySelector(".profile__edit-button").addEventListener("click",(function(){o.open()})),document.querySelector(".profile__add-button").addEventListener("click",(function(){c.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,