!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",inputErrorStyle:"modal__input_type_error",submitButtonSelector:".modal__submit-button",submitButtonName:"modal__submit-button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:".modal__input_type_error",errorClass:"modal__error_visible",debugging:!0},t="modal_open",i={defaultUsername:"Please input name",defaultDescription:"Please input description",defaultProfileImage:"https://www.imdb.com/name/nm1120169/mediaviewer/rm782485249/?ref_=nm_ov_ph",profileNameSelector:".profile__name",profileDescriptionSelector:".profile__description",profileAvatarSelector:".profile__avatar"},s={method:"GET",route:"/users/me"},n={method:"PATCH",route:"/users/me"},r={method:"PATCH",route:"/users/me/avatar"},o={method:"POST",route:"/cards"},a="/cards/",l="PUT",c="/cards/:cardId/likes",m="DELETE",d="/cards/:cardId/likes";class h{constructor(e){let{name:t,link:i,isLiked:s,id:n,imageClickManager:r,onDeleteAPIManager:o,onLikeAPIManager:a,deleteConfirmationManager:l}=e;this.id=n,this._cardTemplate=document.querySelector("#card"),this._cardElement=this._cardTemplate.content.querySelector(".card").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._titleElement=this._cardElement.querySelector(".card__title"),this._cardUnlikedImage=this._cardElement.querySelector(".card__unliked-image"),this._cardLikedImage=this._cardElement.querySelector(".card__liked-image"),this._onDeleteAPIManager=o,this._onLikeAPIManager=a,this.deleteConfirmationManager=l,this._imageClickManager=r,this.setTitle(t),this.setCardImage(i),this.setCardImageAlt(t),this._setEventListeners(),this._setLike(s)}_setEventListeners(){this._cardImage.addEventListener("click",(()=>this.onImageClick())),this._likeButton.addEventListener("click",(()=>this.onLikeClick())),this._deleteButton.addEventListener("click",(()=>this._onDeleteClick()))}setTitle(e){"string"==typeof e?(this.titleText=e,this._titleElement.textContent=this.titleText):(console.log("New card title is not a string. Setting to default."),this.titleText="unnamed card",this._titleElement.textContent=this.titleText)}setCardImage(e){this.imageLink=e,this._cardImage.setAttribute("src",this.imageLink)}setCardImageAlt(e){this.imageAltText=e||this.titleText,this._cardImage.setAttribute("alt",this.imageAltText)}_setLike(e){e?this.activateLikeButton():this.deactivateLikeButton()}onLikeClick(){this.isLikeActive()?this._onLikeAPIManager(this.id,!1).then((e=>{e&&this.deactivateLikeButton()})):this._onLikeAPIManager(this.id,!0).then((e=>{e&&this.activateLikeButton()}))}isLikeActive(){return!this._cardLikedImage.classList.contains("card__liked-image__inactive")}activateLikeButton(){this._cardLikedImage.classList.remove("card__liked-image__inactive"),this._cardUnlikedImage.classList.add("card__unliked-image__inactive")}deactivateLikeButton(){this._cardLikedImage.classList.add("card__liked-image__inactive"),this._cardUnlikedImage.classList.remove("card__unliked-image__inactive")}remove(){this._cardElement.remove()}_onDeleteClick(){this._onDeleteAPIManager(this.deleteConfirmationManager,this.id).then((e=>{e&&this.remove()}))}onImageClick(){this._imageClickManager()}getView(){return this._cardElement}}class _{constructor(e){let{modalSelector:t}=e;this._modalSelector=t,this._modalElement=document.querySelector(t),this._handleEscapeClose=this._handleEscapeClose.bind(this),this._closeButton=this._modalElement.querySelector(".modal__close-button"),this._setEventListeners()}open(){this._modalElement.classList.add(t),this._setEscapeListener(!0)}close(){this._modalElement.classList.remove(t),this._setEscapeListener(!1)}_handleEscapeClose(e){"Escape"===e.key&&this.close()}_setEscapeListener(e){e?document.addEventListener("keydown",this._handleEscapeClose):document.removeEventListener("keydown",this._handleEscapeClose)}_setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._modalElement.addEventListener("click",(e=>this._handleModalOverlayClick(e)))}_handleModalOverlayClick(e){e.target.classList.contains("modal")&&this.close()}}class u extends _{constructor(e){let{modalSelector:t,onSubmitCallback:i}=e;super({modalSelector:t}),this._onSubmitCallback=i,this._submitButton=this._modalElement.querySelector(".modal__submit-button"),this._inputFields=this._modalElement.querySelectorAll(".modal__input"),this._form=this._modalElement.querySelector(".modal__form"),this._currentProfileName=document.querySelector(".profile__name"),this._currentProfileDescription=document.querySelector(".profile__description")}getFormElement(){return this._form}_resetInputs(){this._inputFields.forEach((e=>{e.value=""}))}_setEventListeners(){super._setEventListeners(),this._modalElement.addEventListener("submit",(e=>this._onSubmit(e)))}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.name]=t.value})),e}_onSubmit(e){e.preventDefault(),this._setSubmitToSubmitting(),this._onSubmitCallback(this._getInputValues()).then((()=>{this._resetInputs(),this._setSubmitToSubmit(),this.close()})).catch((()=>{this._setSubmitToSubmit()}))}_setSubmitToSubmitting(){this._submitButton.textContent="Submitting..."}_setSubmitToSubmit(){this._submitButton.textContent="Submit"}setDefaultInputs(e){this._inputFields.forEach((t=>{e[t.name]&&(t.value=e[t.name])}))}setPlaceholderInputs(e){this._inputFields.forEach((t=>{e[t.name]&&t.setAttribute("placeholder",e[t.name])}))}}class p{constructor(e,t){this._settings=e,this._formElement=t,this._setFormInputElements(),this._setFormButtons()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._disableButton(),this._clearFormInputElements()}_showInputError=e=>{const t=this._getErrorElement(e);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)};_hideInputError=e=>{const t=this._getErrorElement(e);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""};_checkFieldValidity=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_getErrorElement(e){return document.querySelector(`#${e.id}-input-error`)}_checkInvalidInput(){return this._formInputElements.every((e=>0!==e.value.length&&e.validity.valid))}_setFormInputElements(){this._formInputElements=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector))}_clearFormInputElements(){this._formInputElements.forEach((e=>{e.value=""}))}_setFormButtons(){this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}_toggleSubmitButton(){this._checkInvalidInput()?this._enableButton():this._disableButton()}_disableButton(){this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0}_enableButton(){this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1}_setEventListeners(){this._toggleSubmitButton(),this._formInputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkFieldValidity(e),this._toggleSubmitButton()}))}))}}const g=new class{constructor(e){let{baseUrl:t,headers:i}=e;this._baseUrl=t,this._authorization=i.authorization,this._contentType=i["Content-Type"]}_buildRequest(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;const i=this._baseUrl+e.route,s={method:e.method,headers:{authorization:this._authorization,"Content-Type":this._contentType}};return t&&(s.body=JSON.stringify(t)),{url:i,info:s}}request(e,t){const i=this._buildRequest(e,t);return fetch(i.url,i.info).then((e=>e.ok?e.json():Promise.reject(`API request Error: ${e.status}`))).catch((e=>{console.error(e)}))}requestDelete(e){return fetch(this._baseUrl+a+e,{method:"DELETE",headers:{authorization:"0ba3486c-b117-4196-b741-be8eda3e197d","Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}requestLikeUpdate(e,t){let i="",s="";return t?(i=this._baseUrl+c,s=l):(i=this._baseUrl+d,s=m),i=i.replace(":cardId",e),fetch(i,{method:s,headers:{authorization:"0ba3486c-b117-4196-b741-be8eda3e197d","Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}getBatchData(e){return new Promise((t=>{this.request(e).then((e=>{t(Promise.all(e))}))}))}getInitialUserData(){return new Promise((e=>{this.request(s).then((t=>{e(Promise.all(t))}))}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"0ba3486c-b117-4196-b741-be8eda3e197d","Content-Type":"application/json"}}),f=new class{constructor(e){let{renderer:t,containerSelector:i,initialize:s}=e;this._items="",this._renderer=t,this._containerSelector=i,this._container=document.querySelector(this._containerSelector),this.initialize=s}renderItems(){this._items?this._items.forEach((e=>{this._renderer(e)})):console.error("No items to render in Section.")}setItems(e){return this._items=e,this._items}addItem(e){this._items.push(e),this._container.append(e)}_clear(){this._items.internalHTML=""}}({containerSelector:".cards__list",renderer:e=>{const t=I(e);f.addItem(t)},initialize:e=>{g.getBatchData(e).then((e=>{f.setItems(e),f.renderItems()}))}});f.initialize({method:"GET",route:"/cards"});const v=new class{constructor(){let{userName:e=i.defaultUsername,profileDescription:t=i.defaultDescription,imageUrl:s=i.defaultProfileImage,initialize:n}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._userName=document.querySelector(i.profileNameSelector),this._userProfileDescription=document.querySelector(i.profileDescriptionSelector),this._userProfileAvatar=document.querySelector(i.profileAvatarSelector),this.setUserName(e),this.setUserDescription(t),this.setUserImage(s),this.initialize=n}setUserName(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i.defaultUsername;this._userName.textContent=e}setUserDescription(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i.defaultDescription;this._userProfileDescription.textContent=e}setUserImage(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i.defaultProfileImage;this._userProfileAvatar.setAttribute("src",e)}setProfileData(){let{userName:e=i.defaultUsername,profileDescription:t=i.defaultDescription,imageUrl:s=i.defaultProfileImage}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.setUserName(e),this.setUserDescription(t),this.setUserImage(s)}getUserProfile(){return{"profile-name":this._userName.textContent,"profile-description":this._userProfileDescription.textContent}}}({initialize:()=>{g.request(s).then((e=>{v.setProfileData({userName:e.name,profileDescription:e.about,imageUrl:e.avatar}),b.setDefaultInputs(v.getUserProfile())})).catch((e=>{console.error(`Failed to get user data: ${e}`)}))}});v.initialize();const E=new u({modalSelector:"#edit-avatar-modal",onSubmitCallback:e=>new Promise(((t,i)=>{g.request(r,{avatar:e["avatar-link"]}).then((()=>{v.setUserImage(e["avatar-link"]),t()})).catch((()=>i()))}))});new p(e,E.getFormElement()).enableValidation();const b=new u({modalSelector:"#edit-profile-modal",onSubmitCallback:e=>new Promise(((t,i)=>{g.request(n,{name:e["profile-name"],about:e["profile-description"]}).then((()=>{v.setUserName(e["profile-name"]),v.setUserDescription(e["profile-description"]),b.setDefaultInputs(v.getUserProfile()),t()})).catch((e=>{console.error(`Failed to edit profile: ${e}`),i()}))}))});new p(e,b.getFormElement()).enableValidation();const k=new u({modalSelector:"#post-modal",onSubmitCallback:e=>new Promise(((t,i)=>{const s=e["post-caption"],n=e["post-image-link"];g.request(o,{name:s,link:n}).then((()=>{const e=I({name:s,imageLink:n});f.addItem(e),t()})).catch((e=>{console.error(`Failed to create new post: ${e}`),i()}))}))});k.setPlaceholderInputs({"post-image-link":"Paste a link to the picture","post-caption":"Type your caption"}),new p(e,k.getFormElement()).enableValidation();const C=new class extends _{constructor(e){let{modalSelector:t}=e;super({modalSelector:t}),this._previewImage=document.querySelector(".modal__preview-image"),this._previewTitle=document.querySelector("#preview-title"),this._previewTitleText=""}populatePreview(e){let{imageUrl:t,imageAlt:i,titleText:s}=e;this._setPreviewTitle(s),this._setPreviewImage(t),this._setPreviewImageAlt(i)}_setPreviewImage(e){this.imageUrl=e,this._previewImage.setAttribute("src",e)}_setPreviewTitle(e){this._previewTitleText=e,this._previewTitle.textContent=this._previewTitleText}_setPreviewImageAlt(e){e?this._previewImage.setAttribute("alt",e):this._previewImage.setAttribute("alt",this._previewTitleText)}clear(){this.setPreviewImage({imageUrl:"",imageAlt:""}),this.setPreviewTitle("")}}({modalSelector:"#preview-modal"});document.querySelector(".profile__edit-button").addEventListener("click",(function(){b.open()})),document.querySelector(".profile__add-button").addEventListener("click",(function(){k.open()})),document.querySelector(".profile__edit-avatar-button").addEventListener("click",(function(){console.log("edit avatar clicked"),E.open()}));const S=new class extends _{constructor(){let{modalSelector:e,confirmText:t="Confirm",awaitingConfirmText:i="Confirming...",cancelText:s="Cancel"}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super({modalSelector:e}),console.log(this._modalElement),this._confirmText=t,this._awaitingConfirmText=i,this._cancelText=s,this._modalConfirmButton=this._modalElement.querySelector(".modal__button-confirm"),this._modalCancelButton=this._modalElement.querySelector(".modal__button-cancel"),this.awaitUserChoice=this.awaitUserChoice.bind(this),this._setConfirmText(this._confirmText),this._setCancelText(this._cancelText)}_setConfirmText(e){console.log(this._modalCinformButton),this._modalConfirmButton.textContent=e}_setCancelText(e){this._modalCancelButton.textContent=e}_setEventListeners(){}_onCancelClick(){return console.log("on cancel clicked"),this._modalElement.removeEventListener("click",this.handler),this.close(),!1}_onConfirmClick(){return console.log("on confirm clicked"),this._modalElement.removeEventListener("click",this.handler),this.close(),!0}_setToConfirming(){this._modalConfirmButton.textContent=this._awaitingConfirmText}setToConfirm(){this._modalConfirmButton.textContent=this._confirmText}awaitUserChoice(){this.open();const e=this;return new Promise((t=>{e._modalElement.addEventListener("click",(function i(s){s.target.classList.contains("modal__button-confirm")&&(e._setToConfirming(),e._modalElement.removeEventListener("click",i),t(!0)),s.target.classList.contains("modal__button-cancel")&&(e._modalElement.removeEventListener("click",i),e.close(),t(!1))}))}))}}({modalSelector:"#confirm-modal",confirmText:"Delete",awaitingConfirmText:"Deleting..."});function I(e){let t,{name:i,link:s,isLiked:n,_id:r}=e;return t=new h({name:i,link:s,isLiked:n,id:r,deleteConfirmationManager:S,imageClickManager:()=>{C.populatePreview({imageUrl:t.imageLink,imageAlt:t.imageAltText,titleText:t.titleText}),C.open()},onDeleteAPIManager:(e,t)=>new Promise(((i,s)=>{e.awaitUserChoice().then((n=>{n&&g.requestDelete(t).then((()=>{e.setToConfirm(),e.close(),i(!0)})).catch((t=>{e.setToConfirm(),console.error(`Card delete request failed ${t}`),s()}))}))})),onLikeAPIManager:(e,t)=>new Promise(((i,s)=>{g.requestLikeUpdate(e,t).then((e=>{i(!0)})).catch((e=>{console.error(`Card like request failed ${e}`),s()}))}))}),t.getView()}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,